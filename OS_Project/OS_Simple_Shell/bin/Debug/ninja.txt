    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}       @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}    

package jfxsetup;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

abstract class Geometricopp
{
    abstract double calculateArea();
    abstract double calculatePerimeter();
}


class Rectangle extends Geometricopp
{
    private double width;
    private double height;

    // non-parameter constractor
    public Rectangle() {
        this.height=1;
        this.width=1;
    }
    // parameter constractor
    public Rectangle(double width,double heigth)
    {
        this.width=width;
        this.height=heigth;
    }
    // parameter constractor with color and filldes 
    public Rectangle(double width,double heigth,String color,boolean filled)
    {
        this.width=width;
        this.height=heigth;
       // need to Complete
       //..............
    }
    // getter and setter for width and heigth 
    public double getWidth() {
        return width;
    }
    // Width shoud be equal 1 or bigger than 1 not be negative 
    public void setWidth(double width) {
        if(width >= 1)
           this.width=width;
        else
            this.width = 1;
    }

    public double getHeight() {
        return height;
    }
    // heigth shoud be equal 1 or bigger than 1 not be negative 
    public void setHeight(double height) {
        if(height >= 1)
        this.height = height;
        else 
            this.height = 1;
    }
    // calculating area
    @Override
    public double calculateArea()
    {
     //   return this.width*this.height;
            return getWidth()*getHeight();
    }
    //calculating perimeter;
    @Override 
    public double calculatePerimeter()
    {
        return 2*(getWidth()+getHeight());
    }
    
}
class Circle extends Geometricopp
{
    private double radius;
    public Circle ()
    {
        this.radius=1;
    }
    public Circle(double radius) {
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

    public void setRadius(double radius) {
        // radius shoud be equal 1 or bigger than 1 not be negative 
        if (radius>=1)
            this.radius=radius;
        else 
            this.radius=1;
    }
    
    @Override
    public double calculateArea()
    {
        return Math.PI*getRadius()*getRadius();
    }
    
    @Override
    public double calculatePerimeter()
    {
        return 2*Math.PI*getRadius();
    }
    
}
class Square extends Rectangle {
    public Square(double side) {
        super(side, side);
    }
}

public class JFXSetup extends Application
{
    private ComboBox<String> shapeComboBox;
    private TextField dimensionTextField1;
    private TextField dimensionTextField2;
    private Button calculateButton;
    private Label resultLabel;

    @Override
    public void start(Stage stage) throws Exception 
    {
        //primaryStage.setTitle("Geometry Calculator");
        stage.setTitle("GeometricObject ");
        //stage.show();
        // Initialize GUI components
        shapeComboBox = new ComboBox<>();
        shapeComboBox.getItems().addAll("Rectangle", "Square", "Circle");

        dimensionTextField1 = new TextField();
        dimensionTextField2 = new TextField();

        calculateButton = new Button("Calculate and Display");
        calculateButton.setOnAction(e ->calculateAndDisplay());

        resultLabel = new Label();
        // Set up the layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setVgap(8);
        grid.setHgap(10);

        GridPane.setConstraints(shapeComboBox, 0, 0);
        GridPane.setConstraints(dimensionTextField1, 1, 0);
        GridPane.setConstraints(dimensionTextField2, 2, 0);
        GridPane.setConstraints(calculateButton, 0, 1);
        GridPane.setConstraints(resultLabel, 0, 2, 3, 1);
        grid.getChildren().addAll(shapeComboBox, dimensionTextField1, dimensionTextField2, calculateButton, resultLabel);

        Scene scene = new Scene(grid, 300, 150);
        stage.setScene(scene);
        stage.show();
    }
    public static void main(String[] args) {
        launch(args);
    }

    private void calculateAndDisplay() {
       
    }
}   